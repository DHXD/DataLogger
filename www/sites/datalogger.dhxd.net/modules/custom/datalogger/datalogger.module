<?php

function datalogger_menu() {
  $items['create/stations'] = array(
      'title' => t('Station'),
      'page callback' => t('_datalogger_nodes'),
      'access callback' => TRUE
  );

  $items['command'] = array(
      'title' => t('Station'),
      'page callback' => t('drupal_get_form'),
      'page arguments' => array(
          '_command_form'
      ),
      'access callback' => TRUE
  );

  return $items;
}

function _datalogger_init_node($title, $field_station_code,
    $field_station_sim_number, $field_station_address, $field_station_longitude,
    $field_station_latitude, $field_station_password,
    $field_station_transmission_speed, $field_station_power,
    $field_station_diagnostic_error) {
  $node = new stdClass();
  $node->title = $title;
  $node->type = 'station';
  $node->created = time();
  $node->changed = $node->created;
  $node->status = 1; // Published?
  $node->promote = 0; // Display on front page?
  $node->sticky = 0; // Display top of page?
  $node->format = 1; // Filtered HTML?
  $node->uid = 1; // Content owner uid (author)?
  $node->language = 'und';

  node_object_prepare($node);
  $node->field_station_code[$node->language][0]['value'] = $field_station_code;
  $node->field_station_address[$node->language][0]['value'] = $field_station_address;
  $node->field_station_diagnostic_error[$node->language][0]['value'] = $field_station_diagnostic_error;
  $node->field_station_latitude[$node->language][0]['value'] = $field_station_latitude;
  $node->field_station_longitude[$node->language][0]['value'] = $field_station_longitude;
  $node->field_station_password[$node->language][0]['value'] = $field_station_password;
  $node->field_station_power[$node->language][0]['value'] = $field_station_power;
  $node->field_station_sim_number[$node->language][0]['value'] = $field_station_sim_number;
  $node->field_station_transmission_speed[$node->language][0]['value'] = $field_station_transmission_speed;

  $node = node_submit($node);
  node_save($node);
}

function _datalogger_nodes() {
  // for ($i = 1; $i < 227; $i ++) {
  // _datalogger_init_node("Station - " . $i, "Code - " . $i, "Address - " . $i, 1, $i, $i,
  // "Password" . $i, $i, "0168123456" . (78 + $i), $i);
  // }

  return "Finished Create Stations.";
}

function _command_form($form, &$form_state) {

  // return $form;
  $options_commands = array(
      'gprs_network_time_synchronization' => 'GPRS Network Time Synchronization',
      'date_time_set' => 'Date & Time Set',
      'set_id' => 'Set ID',
      'get_id' => 'Get ID',
      'set_password'=>'Set Password',
      'get_password'=>'Get Password',
      'all_database_buffer_clear' => 'All Database Buffer Clear',
      'specific_date_database_buffer_clear' => 'Specific Date Database Buffer Clear',
      'accumulated_rain_fall_value_set' => 'Accumulated Rain Fall Value Set',
      'set_rain_fall_clear_time' => 'Set Rain Fall Clear Time',
      'get_rain_fall_clear_time' => 'Get Rain Fall Clear Time',
      'self_power_reset'=>'Self Power Reset',
      'set_active_deactive_battery_power_volt'=>'Set Active Deactive Battery Power Volt',
      'get_active_deactive_battery_power_volt'=>'Get Active Deactive Battery Power Volt',
      'set_battery_volt_offset'=>'Set Battery Volt Offset',
      'get_battery_volt_offset'=>'Get Battery Volt Offset',
      'set_auto_power_management_nable'=>'Set Auto Power Management Nable',
      'get_auto_power_management_nable'=>'Get Auto Power Management Nable',
      'goto_sleep_mode'=>'Goto Sleep Mode',
      'set_data_send_interval_minutes'=>'Set Data Send Interval Minutes',
      'get_data_send_interval_minutes'=>'Get Data Send Interval Minutes',
      'set_communication_type'=>'Set Communication Type',
      'get_communication_type'=>'Get Communication Type',
      'set_gprs_network_setting'=>'Set GPRS Network Setting',
      'get_gprs_network_setting'=>'Get GPRS Network Setting',
      'set_host_netword_information'=>'Set Host Netword Information',
      'get_host_netword_information'=>'Get Host Netword Information',
      'set_host_phone_number'=>'Set Host Phone Number',
      'get_host_phone_number'=>'Get Host Phone Number',
      'get_data_logger_firmware'=>'Get Data Logger Firmware Version',
  );

  $form['command_selects'] = array(
      '#type' => 'select',
      '#title' => 'Command',
      '#options' => $options_commands,
      '#ajax' => array(
          'callback' => '_datalogger_command_form_ajax_callback',
          'wrapper' => 'command_form_replace_textfield_div',
      ),
  );

  switch ($form_state['values']['command_selects']) {
    case 'gprs_network_time_synchronization':
      //       $title = 'GPRS Network Time Synchronization';
      break;
    case 'set_id':
      $title = 'Set ID';
      break;
    case 'get_id':
      $title = t("Get ID");
      break;
    case 'set_password':
      $title = t("Set Password");
      break;
    case 'get_password':
      $title = t("Get Password");
      break;
    case 'all_database_buffer_clear':
      $title = t("All Database Buffer Clear");
      break;
    case 'specific_date_database_buffer_clear':
      $title = t("Specific Date Database Buffer Clear");
      break;
    case 'accumulated_rain_fall_value_set':
      $title = t("Accumulated Rain Fall Value Set");
      break;
    case 'set_rain_fall_clear_time' :
      $title = 'Set Rain Fall Clear Time';
      break;
    case 'get_rain_fall_clear_time' :
      $title = t("Get Rain Fall Clear Time");
      break;
    case 'self_power_reset':
      $title = t("Self Power Reset");
      break;
    case 'set_active_deactive_battery_power_volt':
      $title = 'Set Active Deactive Battery Power Volt';
      break;
    case 'get_active_deactive_battery_power_volt':
      $title = t("Get Active Deactive Battery Power Volt");
      break;
    case 'set_battery_volt_offset':
      $title = 'Set Battery Volt Offset';
      break;
    case 'get_battery_volt_offset':
      $title = t("Get Battery Volt Offset");
      break;
    case 'set_auto_power_management_nable':
      $title = 'Set Auto Power Management Nable';
      break;
    case 'get_auto_power_management_nable':
      $title = t("Get Auto Power Manager Nable");
      break;
    case 'goto_sleep_mode':
      $title = t("Goto Sleep Mode");
      break;
    case 'set_data_send_interval_minutes':
      $title = 'Set Data Send Interval Minutes';
      break;
    case 'get_data_send_interval_minutes':
      $title = t("Get Data Send Interval Minutes");
      break;
    case 'set_communication_type':
      $title = 'Set Communication Type';
      break;
    case 'get_communication_type':
      $title = t("Get Communication Type");
      break;
    case 'set_gprs_network_setting':
      $title = 'Set GPRS Network Setting';
      break;
    case 'get_gprs_network_setting':
      $title = t("Get GPRS Network Setting");
      break;
    case 'set_host_netword_information':
      $title = 'Set Host Netword Information';
      break;
    case 'get_host_netword_information':
      $title = t("Get Host netword Information");
      break;
    case 'get_host_phone_number':
      $title = t("Get Host Phone Number");
      break;
    case 'get_data_logger_firmware':
      $title = t("Get Data Logger Firmware");
      break;
    case 'date_time_set':
      $title = 'Date Time';
      break;
    case 'set_host_phone_number':
      $title = 'Host Phone Number';
      break;
    default:
      $title = 'Parameter';
  }

  // This entire form element will be replaced whenever 'changethis' is updated.
  $form['replace_textfield'] = array(
        '#type' => 'textfield',
        '#title' => t($title),
      // The prefix/suffix provide the div that we're replacing, named by
      // #ajax['wrapper'] above.
      '#prefix' => '<div id="command_form_replace_textfield_div">',
      '#suffix' => '</div>',
  );


  /*
   $form['host_phone_number'] = array(
       '#type' => 'textfield',
       '#title' => t('Host Phone Number'),
       '#cols' => 30,
       '#rows' => 1
   );*/

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Send Now!'),
      '#submit' => array(
          'deductible_submit'
      )
  );

  return $form;

}



/**
 * Callback for ajax_example_simplest.
 *
 * On an ajax submit, the form builder function is called again, then the $form
 * and $form_state are passed to this callback function so it can select which
 * portion of the form to send on to the client.
 *
 * @return renderable array (the textfield element)
 */
function _datalogger_command_form_ajax_callback($form, $form_state) {
  // The form has already been submitted and updated. We can return the replaced
  // item as it is.
  return $form['replace_textfield'];
}

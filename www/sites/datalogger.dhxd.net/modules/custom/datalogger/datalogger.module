<?php

function datalogger_menu() {
  $items['create/stations'] = array(
      'title' => t('Station'),
      'page callback' => "_datalogger_nodes",
      'access callback' => TRUE
  );

  $items['command'] = array(
      'title' => t('Station'),
      'page callback' => "drupal_get_form",
      'page arguments' => array(
          '_command_form'
      ),
      'access callback' => TRUE
  );
  
  $items['logs'] = array(
      'title' => t('Logs'),
      'page callback' => "drupal_get_form",
      'page arguments' => array(
          '_log_nodes'
      ),
      'access callback' => TRUE
  );

  return $items;
}

function _datalogger_init_node($title, $field_station_code,
    $field_station_sim_number, $field_station_address, $field_station_longitude,
    $field_station_latitude, $field_station_password,
    $field_station_transmission_speed, $field_station_power,
    $field_station_diagnostic_error) {
  $node = new stdClass();
  $node->title = $title;
  $node->type = 'station';
  $node->created = time();
  $node->changed = $node->created;
  $node->status = 1; // Published?
  $node->promote = 0; // Display on front page?
  $node->sticky = 0; // Display top of page?
  $node->format = 1; // Filtered HTML?
  $node->uid = 1; // Content owner uid (author)?
  $node->language = 'und';

  node_object_prepare($node);
  $node->field_station_code[$node->language][0]['value'] = $field_station_code;
  $node->field_station_address[$node->language][0]['value'] = $field_station_address;
  $node->field_station_diagnostic_error[$node->language][0]['value'] = $field_station_diagnostic_error;
  $node->field_station_latitude[$node->language][0]['value'] = $field_station_latitude;
  $node->field_station_longitude[$node->language][0]['value'] = $field_station_longitude;
  $node->field_station_password[$node->language][0]['value'] = $field_station_password;
  $node->field_station_power[$node->language][0]['value'] = $field_station_power;
  $node->field_station_sim_number[$node->language][0]['value'] = $field_station_sim_number;
  $node->field_station_transmission_speed[$node->language][0]['value'] = $field_station_transmission_speed;

  $node = node_submit($node);
  node_save($node);
}

function _log_init_node($title,$event) {
  $node = new stdClass();
  $node->title = $title;
  $node->type = 'log';
  $node->created = time();
  $node->changed = $node->created;
  $node->status = 1; // Published?
  $node->promote = 0; // Display on front page?
  $node->sticky = 0; // Display top of page?
  $node->format = 1; // Filtered HTML?
  $node->uid = 1; // Content owner uid (author)?
  $node->language = 'und';

  node_object_prepare($node);
  // $node->field_[$node->language][0]['value'] = $body;
  $node->field_event_type[$node->language][0]['value'] = $event;
  
  $node = node_submit($node);
  node_save($node);
}

function _datalogger_nodes() {
  // for ($i = 1; $i < 227; $i ++) {
  // _datalogger_init_node("Station - " . $i, "Code - " . $i, "Address - " . $i, 1, $i, $i,
  // "Password" . $i, $i, "0168123456" . (78 + $i), $i);
  // }

  return "Finished Create Stations.";
}

function _log_nodes() {
  // for ($i = 1; $i < 10; $i ++) {
  // // _log_init_node("Log - ".$i,"Description - ".$i,"Event type - ".$i);
  // _log_init_node("Log - ".$i,"Set Auto Power Management Nable");
  // }
  
  return "Finished Create Logs.";
}

function _command_form($form, &$form_state) {

  // return $form;
  $options_commands = array(
      'gprs_network_time_synchronization' => t('GPRS Network Time Synchronization'),
      'date_time_set' => t('Date & Time Set'),
      'set_id' => t('Set ID'),
      'get_id' => t('Get ID'),
      'set_password'=>t('Set Password'),
      'get_password'=>t('Get Password'),
      'all_database_buffer_clear' => t('All Database Buffer Clear'),
      'specific_date_database_buffer_clear' => t('Specific Date Database Buffer Clear'),
      'accumulated_rain_fall_value_set' => t('Accumulated Rain Fall Value Set'),
      'set_rain_fall_clear_time' => t('Set Rain Fall Clear Time'),
      'get_rain_fall_clear_time' => t('Get Rain Fall Clear Time'),
      'self_power_reset'=>t('Self Power Reset'),
      'set_active_deactive_battery_power_volt'=>t('Set Active Deactive Battery Power Volt'),
      'get_active_deactive_battery_power_volt'=>t('Get Active Deactive Battery Power Volt'),
      'set_battery_volt_offset'=>t('Set Battery Volt Offset'),
      'get_battery_volt_offset'=>t('Get Battery Volt Offset'),
      'set_auto_power_management_nable'=>t('Set Auto Power Management Nable'),
      'get_auto_power_management_nable'=>t('Get Auto Power Management Nable'),
      'goto_sleep_mode'=>t('Goto Sleep Mode'),
      'set_data_send_interval_minutes'=>t('Set Data Send Interval Minutes'),
      'get_data_send_interval_minutes'=>t('Get Data Send Interval Minutes'),
      'set_communication_type'=>t('Set Communication Type'),
      'get_communication_type'=>t('Get Communication Type'),
      'set_gprs_network_setting'=>t('Set GPRS Network Setting'),
      'get_gprs_network_setting'=>t('Get GPRS Network Setting'),
      'set_host_netword_information'=>t('Set Host Netword Information'),
      'get_host_netword_information'=>t('Get Host Netword Information'),
      'set_host_phone_number'=>t('Set Host Phone Number'),
      'get_host_phone_number'=>t('Get Host Phone Number'),
      'get_data_logger_firmware'=>t('Get Data Logger Firmware Version'),
  );

  $form['command_selects'] = array(
      '#type' => 'select',
      '#title' => t('Command'),
      '#options' => $options_commands,
      '#ajax' => array(
          'callback' => '_datalogger_command_form_ajax_callback',
          'wrapper' => 'command_form_replace_textfield_div',
      ),
  );

  switch ($form_state['values']['command_selects']) {
    case 'gprs_network_time_synchronization':
      //       $title = 'GPRS Network Time Synchronization';
      break;
    case 'set_id':
      $title = t('Set ID');
      break;
    case 'get_id':
      $title = t("Get ID");
      break;
    case 'set_password':
      $title = t("Set Password");
      break;
    case 'get_password':
      $title = t("Get Password");
      break;
    case 'all_database_buffer_clear':
      $title = t("All Database Buffer Clear");
      break;
    case 'specific_date_database_buffer_clear':
      $title = t("Specific Date Database Buffer Clear");
      break;
    case 'accumulated_rain_fall_value_set':
      $title = t("Accumulated Rain Fall Value Set");
      break;
    case 'set_rain_fall_clear_time' :
      $title = t('Set Rain Fall Clear Time');
      break;
    case 'get_rain_fall_clear_time' :
      $title = t("Get Rain Fall Clear Time");
      break;
    case 'self_power_reset':
      $title = t("Self Power Reset");
      break;
    case 'set_active_deactive_battery_power_volt':
      $title = t('Set Active Deactive Battery Power Volt');
      break;
    case 'get_active_deactive_battery_power_volt':
      $title = t("Get Active Deactive Battery Power Volt");
      break;
    case 'set_battery_volt_offset':
      $title = t('Set Battery Volt Offset');
      break;
    case 'get_battery_volt_offset':
      $title = t("Get Battery Volt Offset");
      break;
    case 'set_auto_power_management_nable':
      $title = t('Set Auto Power Management Nable');
      break;
    case 'get_auto_power_management_nable':
      $title = t("Get Auto Power Manager Nable");
      break;
    case 'goto_sleep_mode':
      $title = t("Goto Sleep Mode");
      break;
    case 'set_data_send_interval_minutes':
      $title = t('Set Data Send Interval Minutes');
      break;
    case 'get_data_send_interval_minutes':
      $title = t("Get Data Send Interval Minutes");
      break;
    case 'set_communication_type':
      $title = t('Set Communication Type');
      break;
    case 'get_communication_type':
      $title = t("Get Communication Type");
      break;
    case 'set_gprs_network_setting':
      $title = t('Set GPRS Network Setting');
      break;
    case 'get_gprs_network_setting':
      $title = t("Get GPRS Network Setting");
      break;
    case 'set_host_netword_information':
      $title = t('Set Host Netword Information');
      break;
    case 'get_host_netword_information':
      $title = t("Get Host netword Information");
      break;
    case 'get_host_phone_number':
      $title = t("Get Host Phone Number");
      break;
    case 'get_data_logger_firmware':
      $title = t("Get Data Logger Firmware");
      break;
    case 'date_time_set':
      $title = t('Date Time');
      break;
    case 'set_host_phone_number':
      $title = t('Host Phone Number');
      break;
    default:
      $title = t('Parameter');
  }

  // This entire form element will be replaced whenever 'changethis' is updated.
  $form['replace_textfield'] = array(
        '#type' => 'textfield',
        '#title' => t($title),
      // The prefix/suffix provide the div that we're replacing, named by
      // #ajax['wrapper'] above.
      '#prefix' => '<div id="command_form_replace_textfield_div">',
      '#suffix' => '</div>',
  );


  /*
   $form['host_phone_number'] = array(
       '#type' => 'textfield',
       '#title' => t('Host Phone Number'),
       '#cols' => 30,
       '#rows' => 1
   );*/

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Send Now!'),
      '#submit' => array(
          'deductible_submit'
      )
  );

  return $form;

}



/**
 * Callback for ajax_example_simplest.
 *
 * On an ajax submit, the form builder function is called again, then the $form
 * and $form_state are passed to this callback function so it can select which
 * portion of the form to send on to the client.
 *
 * @return renderable array (the textfield element)
 */
function _datalogger_command_form_ajax_callback($form, $form_state) {
  // The form has already been submitted and updated. We can return the replaced
  // item as it is.
  return $form['replace_textfield'];
}
/*
 * Implementation of hook_action_info().
 */
function datalogger_action_info() {
  return array(    
    'datalogger_command_action' => array(
      'type' => 'comment', 
      'label' => t('Send Command Multiple Stations'), 
      'configurable' => FALSE,
      'behavior' => array('changes_property'), 
      'triggers' => array('comment_presave', 'comment_insert', 'comment_update'),
    ), 
  );
}
